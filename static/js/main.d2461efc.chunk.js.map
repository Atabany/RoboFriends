{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","cardComponent","robots","map","user","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","divStyle","overflowY","border","height","Scroll","props","style","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCESC,EAlBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAO3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAM,QAAQC,IAAG,+BAA0BH,EAA1B,cACtB,6BACC,4BAAKF,GACL,2BAAIC,MCSOK,EApBE,SAAC,GAAc,IAEtBC,EAFqB,EAAZC,OAEcC,KAAI,SAACC,GAC9B,OAAO,kBAAC,EAAD,CACNC,IAAKD,EAAKR,GACVA,GAAKQ,EAAKR,GACVF,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,WAIjB,OACI,6BACDM,ICCQK,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAW,OACZ,2BACIA,UAAW,mCACXY,KAAK,SACLC,YAAY,gBACZC,SAAaH,MCNvBI,EAAS,CACbC,UAAW,SACXC,OAAO,kBACPC,OAAO,SAiBMC,EAbA,SAACC,GAGf,OAEC,yBAAKC,MAAON,GACVK,EAAME,WCYKC,E,kDAxBd,WAAYH,GAAQ,IAAD,8BAClB,cAAMA,IACDI,MAAQ,CACZC,UAAU,GAHO,E,8DAQDC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAMzB,OAAIG,KAAKJ,MAAMC,SACP,wBAAIzB,UAAU,MAAd,cAEA4B,KAAKR,MAAME,a,GArBMQ,aC0DZC,G,wDAjDX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEnB,YAAauB,EAAMC,OAAOC,SAnB1C,EAAKX,MAAQ,CACTnB,OAAQ,GACRK,YAAa,IAJP,E,gEASO,IAAD,OAChB0B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,+BAarC,IAAD,EAC2BZ,KAAKJ,MAA7BnB,EADH,EACGA,OAAQK,EADX,EACWA,YACV+B,EAAiBpC,EAAOqC,QAAO,SAAAnC,GACjC,OAAOA,EAAKV,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAGxD,OAAStC,EAAOwC,OAGR,yBAAK7C,UAAU,MAC1B,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWW,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACmB,kBAAC,EAAD,KAChB,kBAAC,EAAD,CAAU3B,OAAQoC,OAPd,wBAAIzC,UAAU,MAAd,iB,GAlCM8B,c,MCOlBgB,IAASC,OAER,kBAAC,EAAD,MACKC,SAASC,eAAe,SPgHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,a","file":"static/js/main.d2461efc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\n\n\t// if (true) {\n\t// \tthrow(\"aaaa\")\n\t// }\n\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt = 'photo' src={`https://robohash.org/${id}?200x200`} /> \n\t\t\t<div> \n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({robots}) => {\n\n    const cardComponent = robots.map((user) => {\n        return <Card\n         key={user.id}\n         id= {user.id}\n         name={user.name} \n         email={user.email} \n         />\n    })\n\n    return (\n        <div>\n    \t\t{cardComponent}\n    \t</div>\n\n    );\n\n}\n\nexport default Cardlist;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className= \"pa2\"> \n            <input\n                className =\"pa3 ba b--green bg-lightest-blue\"\n                type='search'\n                placeholder='search robots'\n                onChange = { searchChange }\n                \n             />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react'\n\n\n\nconst divStyle={\n  overflowY: 'scroll',\n  border:'3px solid black',\n  height:'800px',\n\n};\n\nconst Scroll = (props) => {\n\n\n\treturn ( \n\n\t\t<div style={divStyle}> \n\t\t\t{props.children}\n\t\t</div>\n\n\t\t);\n};\n\n\nexport default Scroll","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\n\trender() {\n\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1 className='tc'> Oooooops </h1>\n\t\t} else {\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react'\n// import { robots } from './robots'\n\nimport Cardlist from '../components/Cardlist'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nclass App extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n\n\n\n\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    };\n\n\n    render() {\n        const { robots, searchfield } = this.state\n        const filteredRobots = robots.filter(user => {\n            return user.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n        return (!robots.length) ?\n            <h1 className=\"tc\"> LOADING </h1> \n            : (\n                <div className=\"tc\">\n\t\t\t\t\t<h1 className=\"f1\"> Robo Friends </h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n                        <ErrorBoundry> \n\t\t\t\t\t\t  <Cardlist robots={filteredRobots} />\n                        </ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n            );\n    }\n\n}\n\n\nexport default App","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App'\n\nimport 'tachyons';\n\n\n\n\nReactDOM.render(\n\t\t    \n\t<App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}